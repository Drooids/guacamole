{"name":"Guacamole","tagline":"An ODM for ArangoDB in Ruby","body":"# Guacamole\r\n\r\n| Project         | Guacamole\r\n|:----------------|:--------------------------------------------------\r\n| Homepage        | https://github.com/triAGENS/guacamole\r\n| Documentation   | [RubyDoc](http://rubydoc.info/gems/guacamole/frames)\r\n| CI              | [![Build Status](https://travis-ci.org/triAGENS/guacamole.png)](https://travis-ci.org/triAGENS/guacamole)\r\n| Code Metrics    | [![Code Climate](https://codeclimate.com/github/triAGENS/guacamole.png)](https://codeclimate.com/github/triAGENS/guacamole)\r\n| Gem Version     | [![Gem Version](https://badge.fury.io/rb/guacamole.png)](http://badge.fury.io/rb/guacamole)\r\n| Dependencies    | [![Dependency Status](https://gemnasium.com/triAGENS/guacamole.png)](https://gemnasium.com/triAGENS/guacamole)\r\n| Ready Stories   | [![Stories in Ready](https://badge.waffle.io/triagens/guacamole.png?label=ready)](https://waffle.io/triagens/guacamole)\r\n\r\nGuacamole is an ODM for ArangoDB that offers integration for Ruby on Rails.\r\n\r\nAll tests run on Travis CI for the following versions of Ruby:\r\n\r\n* MRI 1.9.3 and 2.0.0\r\n* Rubinius 1.9 mode\r\n* JRuby 1.9 mode\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'guacamole'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```shell\r\nbundle\r\n```\r\n\r\nOr install it yourself as:\r\n\r\n```shell\r\ngem install guacamole\r\n```\r\n\r\n## Usage\r\n\r\nThere are two main concepts you have to be familiar with in Guacamole: Collections and models. Both of these are modules that you can mixed in to your classes:\r\n\r\n### Models\r\n\r\nModels are representations of your data. They are not aware of the database but work independent of it. A simple example for a model:\r\n\r\n```ruby\r\nclass Article\r\n  include Guacamole::Model\r\n\r\n  attribute :title, String\r\n  attribute :comments, Array[Comment]\r\n\r\n  validates :title, presence: true\r\nend\r\n```\r\n\r\nThis example defines a model called Article, which has a title represented by a String and an array of comments. Comment in this case is another `Guacamole::Model`. The `Model` mixin will also add validation from ActiveModel to your model – it works as you know it from ActiveRecord for example.\r\n\r\nIn a Rails application, they are stored in the `app/models` directory by convention.\r\n\r\n### Collections\r\n\r\nCollections are your gateway to the database. They persist your models and offer querying for them. They will translate the raw data from the database to your domain models and vice versa. By convention they are the pluralized version of the model with the suffix `Collection`. So given the model from above, this could be the according collection:\r\n\r\n```ruby\r\nclass ArticlesCollection\r\n  include Guacamole::Collection\r\n\r\n  map do\r\n    embeds :comments\r\n  end\r\nend\r\n```\r\n\r\nAs you can see above, you don't need to explicitly state that you are mapping to the `Article` class, because this is the naming convention. But what does `map` do?\r\n\r\nIn the block you provide to `map` you can configure things that should happen when you map from the raw data to the model and vice versa. In a document store like ArangoDB you can have nested data – so the JSON stored in ArangoDB's `articles` collection could look something like this:\r\n\r\n```json\r\n{\r\n  \"title\": \"The grand blog post\",\r\n  \"comments\": [\r\n    {\r\n      \"text\": \"This was really a grand blog post\"\r\n    },\r\n    {\r\n      \"text\": \"I don't think it was that great\"\r\n    }\r\n  ]\r\n```\r\n\r\nWith the `map` configuration above it would take each of the objects in the comments hash and create instances of the `Comment` model from them. Then it would set the `comments` attribute of the new article and set it to the array of those comments.\r\n\r\nIn a Rails application, they are stored in the `app/collections` directory by convention. **Note:** As of now you do have to add the `app/collections` path manually to the load path in your `config/application.rb`:\r\n\r\n```ruby\r\nconfig.autoload_paths += Dir[Rails.root.join('app', 'collections', '*.rb').to_s]\r\n```\r\n\r\n### Configuration\r\n\r\nYou configure the connection to ArangoDB in the same fashion as you would configure a connection to a relational database in a Rails application: Just create a YAML file which holds the required parameters for each of your environment:\r\n\r\n```yaml\r\ndevelopment:\r\n  protocol: 'http'\r\n  host: 'localhost'\r\n  port: 8529\r\n  password: ''\r\n  username: ''\r\n  database: 'planet_express_development'\r\n```\r\n\r\nWe're looking at `config/guacamole.yml` to read this configuration. If you're using Capistrano or something else make sure you change your deployment recipes accordingly to use the `guacamole.yml` and not the `database.yml`.\r\n\r\n**Note:** Currently we're not providing any testing helper, thus you need to make sure to cleanup the database yourself before each run. You can look at the `spec/acceptance/spec_helper.rb` of Guacamole for inspiration of how to do this.\r\n\r\n## Issues or Questions\r\n\r\nIf you find a bug in this gem, please report it on [our tracker](https://github.com/triAGENS/guacamole/issues). We use [Waffle.io](https://waffle.io/triagens/guacamole) to manage the tickets – go there to see the current status of the ticket. If you have a question, just contact us via the [mailing list](https://groups.google.com/forum/?fromgroups#!forum/ashikawa) – we are happy to help you :smile:\r\n\r\n## Contributing\r\n\r\nIf you want to contribute to the project, see CONTRIBUTING.md for details. It contains information on our process and how to set up everything. The following people have contributed to this project:\r\n\r\n* Lucas Dohmen ([@moonglum](https://github.com/moonglum)): Developer\r\n* Dirk Breuer ([@railsbros-dirk](https://github.com/railsbros-dirk)): Developer\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}